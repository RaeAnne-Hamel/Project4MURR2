<?php
/**
 * DELETE THIS EXAMPLE - https://api-platform.com/docs/distribution/testing/
 */
namespace App\Tests;

use ApiPlatform\Core\Bridge\Symfony\Bundle\Test\ApiTestCase;
use Hautelook\AliceBundle\PhpUnit\RefreshDatabaseTrait;

use App\Entity\Book;

class DeleteMeTest extends ApiTestCase
{
    // This trait provided by HautelookAliceBundle will take care of refreshing the database content to a known state before each test
    use RefreshDatabaseTrait;

    private static $client;
    private static $repo;
    private $dataArray;
    const VIOLATION_ARRAY=[
            '@context' => '/contexts/ConstraintViolationList',
            '@type' => 'ConstraintViolationList',
            'hydra:title' => 'An error occurred'
        ];

    const API_URL = 'api/Books';

    /**
     * @beforeClass
     */
    public static function setUpBeforeClass()
    {
        self::$client = static::createClient();
        // Through the container, you can access all your services from the tests, including the ORM
        self::$repo = static::$container->get('doctrine')->getRepository(Book::class);
    }

    /**
     * @before
     */
    public function setUp(): void
    {
        //fill the data array with all valid data
        $this->dataArray = [
            'isbn' => '0099740915',
            'title' => 'The Handmaid\'s Tale',
            'description' => 'Brilliantly conceived and executed, this powerful evocation of twenty-first century America gives full rein to Margaret Atwood\'s devastating irony, wit and astute perception.',
            'author' => 'Margaret Atwood',
            'publicationDate' => '1985-07-31T00:00:00+00:00',
        ];
    }

    /**
     * @test
     */
    public function testCreateBook(): void
    {
        $response = self::$client->request('POST', self::API_URL, ['json' => $this->dataArray]);

        $this->assertResponseStatusCodeSame(201);
        $this->assertResponseHeaderSame('content-type', 'application/ld+json; charset=utf-8');
        $this->assertJsonContains([
            '@context' => '/contexts/Book',
            '@type' => 'Book',
            ...$this->dataArray,
            'reviews' => [],
        ]);
        $this->assertRegExp('~^/books/\d+$~', $response->toArray()['@id']);
        $this->assertMatchesResourceItemJsonSchema(Book::class);
    }

    /**
     * @test
     */
    public function testCreateBook_Invalid_ISBN(): void
    {
        //set one value as invalid
        $this->dataArray['isbn'] = 'invalid';
        $response = self::$client->request('POST', self::API_URL, ['json' => $this->dataArray ]);

        $this->assertResponseStatusCodeSame(400);
        $this->assertResponseHeaderSame('content-type', 'application/ld+json; charset=utf-8');

        $this->assertJsonContains([
            ...self::VIOLATION_ARRAY,
            'hydra:description' => 'isbn: This value is neither a valid ISBN-10 nor a valid ISBN-13.'
        ]);

    }

    /**
     * @test
     */
    public function testCreateBook_Invalid_Title_Empty(): void
    {
        //set one value as invalid
        unset($this->dataArray['title']);
        $response = self::$client->request('POST', self::API_URL, ['json' => $this->dataArray ]);

        $this->assertResponseStatusCodeSame(400);
        $this->assertResponseHeaderSame('content-type', 'application/ld+json; charset=utf-8');

        $this->assertJsonContains([
            ...self::VIOLATION_ARRAY,
            'hydra:description' => 'title: This value should not be blank.'
        ]);
    }
    /**
     * @test
     */
    public function testCreateBook_Invalid_Description_Empty(): void
    {
        //set one value as invalid
        unset($this->dataArray['description'] );
        $response = self::$client->request('POST', self::API_URL, ['json' => $this->dataArray ]);

        $this->assertResponseStatusCodeSame(400);
        $this->assertResponseHeaderSame('content-type', 'application/ld+json; charset=utf-8');

        $this->assertJsonContains([
            ...self::VIOLATION_ARRAY,
            'hydra:description' => 'description: This value should not be blank.'
        ]);
    }

    /**
     * @test
     */
    public function testUpdateBook(): void
    {

        // findIriBy allows to retrieve the IRI of an item by searching for some of its properties.
        // ISBN 9786644879585 has been generated by Alice when loading test fixtures.
        // Because Alice use a seeded pseudo-random number generator, we're sure that this ISBN will always be generated.
        $iri = $this->findIriBy(Book::class, ['isbn' => '9781344037075']);

        $response = self::$client->request('PUT', $iri, ['json' => ['title' => 'updated title']]);

        $this->assertResponseIsSuccessful();
        $this->assertJsonContains([
            '@id' => $iri,
            'isbn' => '9781344037075',
            'title' => 'updated title',
        ]);
    }

    /**
     * @test
     */
    public function testDeleteBook(): void
    {
        // findIriBy allows to retrieve the IRI of an item by searching for some of its properties.
        // ISBN 9786644879585 has been generated by Alice when loading test fixtures.
        // Because Alice use a seeded pseudo-random number generator, we're sure that this ISBN will always be generated.
        $iri = $this->findIriBy(Book::class, ['isbn' => '9781344037075']);

        $response = self::$client->request('DELETE', $iri);

        $this->assertResponseStatusCodeSame(204);

        //query the database for the book we just deleted
        $this->assertNull( self::$repo->findOneBy(['isbn' => '9781344037075']) );
    }

    /**
     * @test
     */
    public function testLogin(): void
    {
        $response = self::$client->request('POST', '/login', ['json' => [
            'email' => 'admin@example.com',
            'password' => 'admin',
        ]]);

        $this->assertResponseIsSuccessfull();
    }
}

